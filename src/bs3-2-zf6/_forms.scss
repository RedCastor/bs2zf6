//
// Forms
// --------------------------------------------------

.form-group {
  position: relative;
  @include foundation-form-fieldset;
}
.input-group input {
  @extend .input-group-field;
}
.input-group-addon {
  @extend .input-group-label;
}
.input-group-btn {
  @extend .input-group-button;
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  input {
    padding-right: ($input-height-base * 1.25);
  }
}
// Feedback icon
.form-control-feedback {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 2; // Ensure icon is above input groups
  display: block;
  width: $input-height-base;
  height: $input-height-base;
  line-height: $input-height-base;
  text-align: center;
  pointer-events: none;
}

// Feedback states
.has-success {
  @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
}
.has-warning {
  @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
}
.has-error {
  @include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);
}

// Reposition feedback icon if input has visible label above
.has-feedback label {

  & ~ .form-control-feedback {
    top: ($line-height-computed + 5); // Height of the `label` and its margin
  }
  &.sr-only ~ .form-control-feedback {
    top: 0;
  }
}


// [converter] extracted as `@mixin form-inline` for libsass compatibility
.form-inline {
  @include form-inline;

  label {
    display: inline-block;
    margin: 0 0 $form-spacing;
  }
}
